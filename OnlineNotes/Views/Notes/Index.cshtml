@model IEnumerable<OnlineNotes.Models.Note>
@using OnlineNotes.Models.Enums;
@using OnlineNotes.Models.Pagination;

@{
    ViewData["Title"] = "Index";

    Pager pager = new Pager();
    int pageNo = 0;
    if (ViewBag.Pager != null)
    {
        pager = ViewBag.Pager;
        pageNo = pager.CurrentPage;
    }
}

@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-dismissible alert-danger">
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        <strong>Error!</strong> @ViewBag.ErrorMessage
    </div>
}

<h1>Index</h1>

@*Makes the text warp to prevent horizontal scrolling*@
<style>
    pre {
        overflow-x: auto;
        white-space: pre-wrap;
    }

    .status-column {
        width: 50px; /* Adjust the width as needed */
    }

    #ellipsis {
        display: inline-block;
        width: auto;
        height: auto;
        max-height: 250px;
        width: 410px;
        overflow: auto;
        text-overflow: ellipsis;
    }
</style>

<p>
    <div class="btn-group" role="group">
        <a class="btn btn-primary" asp-action="Create" style="margin-right:100px">Create New</a>

        <button id="btnGroupDrop" type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="margin-right:10px">Sort by </button>
        <div class="dropdown-menu" aria-labelledby="btnGroupDrop">
            <a class="dropdown-item" asp-action="Sort" asp-route-sortOrder="0">Newest</a>
            <a class="dropdown-item" asp-action="Sort" asp-route-sortOrder="1">Oldest</a>
        </div>

        <button id="btnGroupDrop" type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Filter by </button>
        <div class="dropdown-menu" aria-labelledby="btnGroupDrop">
            <a class="dropdown-item" asp-action="Filter">All</a>
            <a class="dropdown-item" asp-action="Filter" asp-route-status="Public">Public</a>
            <a class="dropdown-item" asp-action="Filter" asp-route-status="Draft">Draft</a>
            <a class="dropdown-item" asp-action="Filter" asp-route-status="Archived">Archived</a>
        </div>

        <form class="d-flex" style="margin-left:10px" asp-action="Search">
            <input class="form-control me-sm-2" type="search" placeholder="Search" name="term">
            <button class="btn btn-secondary my-2 my-sm-0" type="submit">Search</button>
        </form>

        <a class="btn btn-link" asp-action="Filter">Show All</a>
    </div>
</p>
<table class="table">
    <thead>
    <tr>
        <th class="date-column">Date Created</th> <!-- Created Date column -->
        <th class="status-column">Status</th> <!-- Status column -->
        <th>
            @Html.DisplayNameFor(model => model.Title)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Contents)
        </th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model)
    {
        <tr>
                <td class="date-column" style="max-width: 300px">
                    @Html.DisplayFor(modelItem => item.CreationDate)
                </td>

                <td class="status-column">
                    @switch (item.Status)
                    {
                        case NoteStatus.Draft:
                            <span class="badge rounded-pill bg-light">@Html.DisplayFor(modelItem => item.Status)</span>
                            break;
                        case NoteStatus.Public:
                            <span class="badge rounded-pill bg-info">@Html.DisplayFor(modelItem => item.Status)</span>
                            break;
                        case NoteStatus.Archived:
                            <span class="badge rounded-pill bg-warning">@Html.DisplayFor(modelItem => item.Status)</span>
                            break;
                        default:
                            <span class="badge rounded-pill bg-danger">@Html.DisplayFor(modelItem => item.Status)</span>
                            break;
                    }
                </td>
            <td>
                    <pre style="max-width: 160px">@Html.DisplayFor(modelItem => item.Title)</pre>
            </td>
                <td>
                    <pre id="ellipsis">@Html.DisplayFor(modelItem => item.Contents)</pre>
            </td>
            <td>
                <div class="d-flex gap-1">
                    <a class="btn btn-primary" asp-action="Details" asp-route-id="@item.Id">Details</a>
                    <a class="btn btn-info" asp-action="Edit" asp-route-id="@item.Id">Edit</a>
                    <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>

<div class="container">
    @if (pager.TotalPages > 0)
    {
        <ul class="pagination justify-content-end">
            @for (var pge = pager.StartPage; pge <= pager.EndPage; pge++)
            {
                <li class="page-item @(pge == pager.CurrentPage ? "active" : "")">
                    <a class="page-link" asp-controller="Notes" asp-action="Index" asp-route-page="@pge">
                        @pge
                    </a>
                </li>
            }
        </ul>
    }
</div>